apiVersion: opentelemetry.io/v1alpha1
kind: OpenTelemetryCollector
metadata:
  name: otelcol-containerlog
spec:
  mode: daemonset
  image: ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib:0.51.0
  imagePullPolicy: IfNotPresent
  serviceAccount: otelcontribcol
  ports:
    - port: 55679
      name: zpages
    - port: 4318
      name: otlp-http
    - port: 4317
      name: otlp-grpc
    - port: 8888
      name: metrics
  resources:
    limits:
      cpu: 400m
      memory: 500Mi
    requests:
      cpu: 400m
      memory: 500Mi
  volumeMounts:
    - mountPath: /var/log
      name: varlog
      readOnly: true
    - mountPath: /var/lib/docker/containers
      name: varlibdockercontainers
      readOnly: true
    - mountPath: /etc/otelcol-contrib/config.yaml
      name: data
      subPath: config.yaml
      readOnly: true
  volumes:
    - name: varlog
      hostPath:
        path: /var/log
    - name: varlibdockercontainers
      hostPath:
        path: /var/lib/docker/containers
    - name: data
      configMap:
        name: otel-collector-config
  env: 
    - name: K8S_CLUSTER_NAME
      value: "grandview-XYZ"
    - name: K8S_CLUSTER_ENV
      value: "XYZ"
    - name: K8S_NODE_NAME
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName
  config: |
    receivers:
      # source: metrics
      prometheus:
        config:
          global:
            scrape_interval: 1m
            scrape_timeout: 20s
            evaluation_interval: 1m
          scrape_configs:
            - job_name: 'otelcol-containerlog-$K8S_CLUSTER_ENV'
              scrape_interval: 60s
              static_configs:
                - targets: ['0.0.0.0:8888']
      # https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/examples/kubernetes/otel-collector-config.yml
      filelog:
        include:
          - /var/log/pods/*/*/*.log
        exclude:
          # Exclude logs from ...
          # e.g., /var/log/pods/opentelemetry-operator-system_opentelemetry-operator/manager/0.log
          - /var/log/pods/observability_*/*/*.log
          - /var/log/pods/devsecops_*/*/*.log
          - /var/log/pods/tekton_*/*/*.log
          - /var/log/pods/ingress-nginx_*/*/*.log
          - /var/log/pods/kourier-system_*/*/*.log
        #start_at: beginning
        start_at: end
        include_file_path: true
        include_file_name: false
        operators:
          # Find out which format is used by kubernetes
          - type: router
            id: get-format
            routes:
              - output: parser-docker
                expr: 'body matches "^\\{"'
              - output: parser-crio
                expr: 'body matches "^[^ Z]+ "'
              - output: parser-containerd
                expr: 'body matches "^[^ Z]+Z"'
          # Parse CRI-O format
          - type: regex_parser
            id: parser-crio
            regex: '^(?P<time>[^ Z]+) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*) ?(?P<log>.*)$'
            output: extract_metadata_from_filepath
            timestamp:
              parse_from: attributes.time
              layout_type: gotime
              layout: '2006-01-02T15:04:05.000000000-07:00'
          # Parse CRI-Containerd format
          - type: regex_parser
            id: parser-containerd
            regex: '^(?P<time>[^ ^Z]+Z) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*) ?(?P<log>.*)$'
            output: extract_metadata_from_filepath
            timestamp:
              parse_from: attributes.time
              layout: '%Y-%m-%dT%H:%M:%S.%LZ'
          # Parse Docker format
          - type: json_parser
            id: parser-docker
            output: extract_metadata_from_filepath
            timestamp:
              parse_from: attributes.time
              layout: '%Y-%m-%dT%H:%M:%S.%LZ'
          - type: move
            from: attributes.log
            to: body
          # Extract metadata from file path
          - type: regex_parser
            id: extract_metadata_from_filepath
            regex: '^.*\/(?P<namespace>[^_]+)_(?P<pod_name>[^_]+)_(?P<uid>[a-f0-9\-]{36})\/(?P<container_name>[^\._]+)\/(?P<restart_count>\d+)\.log$'
            parse_from: attributes["log.file.path"]
          # Rename attributes
          - type: move
            from: attributes.stream
            to: attributes["log.iostream"]
          - type: move
            from: attributes.container_name
            to: attributes["k8s.container.name"]
          - type: move
            from: attributes.namespace
            to: attributes["k8s.namespace.name"]
          - type: move
            from: attributes.pod_name
            to: attributes["k8s.pod.name"]
          - type: move
            from: attributes.restart_count
            to: attributes["k8s.container.restart_count"]
          - type: move
            from: attributes.uid
            to: attributes["k8s.pod.uid"]
          - type: copy
            from: attributes["k8s.pod.uid"]
            to: resource["k8s.pod.uid"]

    processors:
      memory_limiter:
        check_interval: 5s
        limit_percentage: 80
        spike_limit_percentage: 30
      batch:
        timeout: 2s
        send_batch_size: 2048
        send_batch_max_size: 2048
      # k8sattributes processor to get the metadata from K8s
      k8sattributes:
        auth_type: "serviceAccount"
        passthrough: false
        extract:
          metadata:
            - k8s.pod.name
            - k8s.pod.uid
            - k8s.deployment.name
            - k8s.cluster.name
            - k8s.namespace.name
            - k8s.node.name
            - k8s.pod.start_time
          # Pod labels which can be fetched via K8sattributeprocessor
          annotations:
            - key_regex: ^.*
              from: pod
          labels:
            - key_regex: ^.*
              from: pod
        # Pod association using resource attributes and connection
        pod_association:
          - from: resource_attribute
            name: ip
          - from: resource_attribute
            name: k8s.pod.ip
          - from: resource_attribute
            name: host.name
          - from: connection
            name: ip
          - from: resource_attribute
            name: k8s.pod.uid
      resource:
        attributes:
        - key: k8s.cluster.name
          value: "$K8S_CLUSTER_NAME"
          action: upsert

    exporters:
      logging:
        #loglevel: debug
      otlp:
        endpoint: otelcol-k8s-collector.observability:4317
        tls:
          insecure: true
      otlphttp:
        endpoint: https://otelcol.dev.metatron.app
    
    extensions:
      health_check:
      pprof:
      zpages:
        endpoint: 0.0.0.0:55679
      memory_ballast:

    service:
      telemetry:
        logs:
          level: "info"
      extensions: [health_check, pprof, zpages, memory_ballast]
      pipelines:
        metrics:
          receivers: [prometheus]
          processors: [memory_limiter, batch, resource]
          exporters: [logging, otlphttp]
        logs:
          receivers: [filelog]
          processors: [batch, k8sattributes, resource]
          #exporters: [logging, otlp]
          exporters: [logging, otlphttp]
